#include "edic_defs.h"

#ifdef __GNUC__
		.thumb
		.syntax unified

		.global _start
		
#endif

		area reset, code, readonly
		preserve8
		thumb
		
		export delay_20ns

vector_table
		DCD SYSMEM_BASE + SYSMEM_SIZE	; SP
		DCD Reset_Handler				; PC
						
		DCD GenericInterrupt_Handler	; vector 2
		DCD GenericInterrupt_Handler	; vector 3, HardFault
		DCD GenericInterrupt_Handler	; vector 4
		DCD GenericInterrupt_Handler	; vector 5
		DCD GenericInterrupt_Handler	; vector 6
		DCD GenericInterrupt_Handler	; vector 7
		DCD GenericInterrupt_Handler	; vector 8
		DCD GenericInterrupt_Handler	; vector 9
		DCD GenericInterrupt_Handler	; vector 10
		DCD GenericInterrupt_Handler	; vector 11
		DCD GenericInterrupt_Handler	; vector 12
		DCD GenericInterrupt_Handler	; vector 13
		DCD GenericInterrupt_Handler	; vector 14
		DCD GenericInterrupt_Handler	; vector 15
		
		DCD GenericInterrupt_Handler	; vector 16, LOW_BATT
		DCD GenericInterrupt_Handler	; vector 17, P2_DIN
		DCD GenericInterrupt_Handler	; vector 18, PSH_DOUT
		DCD GenericInterrupt_Handler	; vector 19, ITIMER
		DCD GenericInterrupt_Handler	; vector 20
		DCD GenericInterrupt_Handler	; vector 21
		DCD GenericInterrupt_Handler	; vector 22
		DCD GenericInterrupt_Handler	; vector 23
		DCD GenericInterrupt_Handler	; vector 24
		DCD GenericInterrupt_Handler	; vector 25
		DCD GenericInterrupt_Handler	; vector 26
		DCD GenericInterrupt_Handler	; vector 27
		DCD GenericInterrupt_Handler	; vector 28
		DCD GenericInterrupt_Handler	; vector 29
		DCD GenericInterrupt_Handler	; vector 30
		DCD GenericInterrupt_Handler	; vector 31

		ENTRY

Reset_Handler 		proc
		export  Reset_Handler			[weak]
		IMPORT  main
		IMPORT uart_write
		
		mov r10, r0
		
		ldr r1, regbase
		ldr r3, [r1, #REG_CTRL_OFFSET]
		ldr r4, reg_ctrl_mask
		ands r3, r4
		ldr r2, reg_ctrl_init
		orrs r2, r3
		str r2, [r1, #REG_CTRL_OFFSET]
		
		ldr r2, reg_p1_init
		str r2, [r1, #REG_P1_DOUT_OFFSET]	
		
		ldr r0, =main
		bx r0
		endp

GenericInterrupt_Handler	proc
		export GenericInterrupt_Handler
		
		push {r0,r1,lr}
		
		mov r1, lr
		mrs r0, IPSR	;Get interrupt number
		
		cmp r0, #3
		beq hardfault	;If 2 - HardFault 
		cmp r0, #16
		beq lowbatt		;If 16 - LOW_BATT
		cmp r0, #17
		beq p2din		;If 17 - P2_DIN
		cmp r0, #18
		beq pshdout		;if 18 - PSH_DOUT
		cmp r0, #19
		beq itimer		;if 19 - ITIMER
		b stranger		;if something else - wild interrupt!
		
hardfault
		bl HardFault_Handler
		b end
lowbatt
		bl LOW_BATT_Handler
		b end
p2din
		bl P2_DIN_Handler
		b end
pshdout
		bl PSH_DOUT_Handler
		b end
itimer
		bl ITIMER_Handler
		b end
stranger
		bl WildInterruptFault_Handler
	;	b end
end
		pop {r0,r1,pc} 
		endp


LOW_BATT_Handler	proc
		export  LOW_BATT_Handler		[weak]
		b       .
		endp

P2_DIN_Handler		proc
		export  P2_DIN_Handler			[weak]
		b       .
		endp

PSH_DOUT_Handler	proc
		export  PSH_DOUT_Handler		[weak]
		b       .
		endp

ITIMER_Handler		proc
		export  ITIMER_Handler			[weak]
		b       .
		endp
					
HardFault_Handler	proc
		export  HardFault_Handler		[weak]
		import uart_write
		movs r0, #70
		bl uart_write
		b       .
		endp

WildInterruptFault_Handler proc
		export WildInterruptFault_Handler [weak]
		import uart_write
		movs r0, #87
		bl uart_write
		b		.
		endp

delay_20ns
		mov R0, R0
		b	.
		
		align
sysmem_addr		DCD SYSMEM_BASE
sysmem_size		DCD SYSMEM_SIZE
regbase			DCD REG_BASE
reg_ctrl_init	DCD 0x0001000e
reg_ctrl_mask	DCD 0xfffe0000
reg_p1_init		DCD 0x473
		end
